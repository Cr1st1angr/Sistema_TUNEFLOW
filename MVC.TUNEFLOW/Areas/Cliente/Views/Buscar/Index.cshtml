@model IEnumerable<Modelos.Tuneflow.Media.Cancion>

@{
    Layout = "~/Areas/Cliente/Views/Shared/_LayoutCliente.cshtml";
    ViewData["Title"] = "Buscar Canciones";
}

<h1 class="page-title">Buscar Canciones</h1>

<form asp-action="Index" method="get">
    <div class="input-group mb-3 search-bar">
        <input type="text" name="query" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Buscar por título, artista o álbum..." />
        <button class="btn btn-primary" type="submit">Buscar</button>
    </div>
</form>

@if (Model != null && Model.Any())
{
    <table class="table table-hover table-dark results-table">
        <thead>
            <tr>
                <th>Título</th>
                <th>Artista</th>
                <th>Álbum</th>
                <th>Duración</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Titulo</td>
                    <td>@item.Artista</td>
                    <td>@item.Album</td>
                    <td>
                        @item.TiempoEnMinutos(item.Duracion)
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="playSongFromSearch(@item.Id)">Reproducir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="no-results">No se encontraron resultados. Intenta otra búsqueda.</p>
}

@section Scripts {
    <script>
        // Esta función necesita ser accesible globalmente y es llamada desde los botones "Reproducir"
        // `window.loadSong` es la función global expuesta en reproductor.js
        function playSongFromSearch(songId) {
            // Hacemos una llamada AJAX para obtener los detalles de la canción desde el controlador
            fetch(`/Reproductor/GetCancionData?id=${songId}`)
                .then(response => {
                    if (!response.ok) {
                        // Si la respuesta no es OK (ej. 404, 500), lanzamos un error
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json(); // Esperamos una respuesta JSON con los datos de la canción
                })
                .then(songData => {
                    // Verificamos que window.loadSong esté disponible antes de llamarla
                    if (typeof window.loadSong === 'function') {
                        // Llamamos a la función global loadSong de reproductor.js
                        // Asegúrate de que los nombres de propiedades de 'songData' (en camelCase)
                        // coincidan con los esperados por `loadSong` en reproductor.js.
                        // Tu modelo Cancion tiene Propiedades como 'Titulo', 'Artista', 'RutaArchivo', 'RutaImagen', 'Letra'.
                        // ASP.NET Core MVC serializa estos a 'titulo', 'artista', 'rutaArchivo', 'rutaImagen', 'letra' por defecto.
                        window.loadSong({
                            id: songData.id,
                            title: songData.titulo,
                            artist: songData.artista,
                            src: songData.rutaArchivo,
                            cover: songData.rutaImagen,
                            lyrics: songData.letra // Si tu modelo Cancion tiene una propiedad Letra
                        });
                    } else {
                        console.error("Error: La función window.loadSong no está definida. Asegúrate de que reproductor.js se cargue correctamente.");
                        alert("No se pudo iniciar el reproductor. Recarga la página.");
                    }
                })
                .catch(error => {
                    console.error("Error al cargar la canción:", error);
                    alert("No se pudo cargar la canción para reproducción. Mensaje: " + error.message);
                });
        }
    </script>
}
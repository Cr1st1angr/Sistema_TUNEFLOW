@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es" data-theme="dark">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TuneFlow Cliente</title>

    <link rel="icon" type="image/png" href="~/img/favicon.png" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/cliente.css" />
</head>
<body class="cliente-body d-flex flex-column">

    <!-- 📌 Sidebar -->
    <div class="cliente-sidebar d-flex flex-column justify-content-between">
        <div>
            <div class="text-center my-3">
                <img src="~/img/logo.png" alt="Logo" class="img-fluid" style="max-width: 90px;" />
            </div>

            <nav class="nav flex-column text-center">
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Panel" asp-action="Panel">Inicio</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Buscar" asp-action="Index">Buscar</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Descubre" asp-action="Index">Descubre</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Biblioteca" asp-action="Index">Biblioteca</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Favoritos" asp-action="Index">Favoritos</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Perfil" asp-action="Index">Perfil</a>
                <a class="nav-link text-primary" asp-area="Cliente" asp-controller="Playlist" asp-action="Index">Mis playlists</a>
            </nav>
        </div>

        <!-- 🌗 Switch Tema -->
        <div class="text-center mb-3">
            <label class="theme-switch">
                <input type="checkbox" id="theme-toggle" />
                <span class="slider"></span>
            </label>
            <span class="switch-label d-block mt-1">Modo Oscuro</span>
        </div>
    </div>

    <!-- 🧱 Contenido principal -->
    <div class="cliente-content px-3 py-4">
        @RenderBody()
    </div>

    <!-- 🎵 Reproductor fijo -->
    <div class="cliente-reproductor" id="reproductor">
        <div class="d-flex align-items-center w-100">
            <div class="reproductor-portada me-3">
                <img id="portadaActual" src="~/img/placeholder.png" alt="Portada" style="height: 60px; width: 60px; object-fit: cover;" />
            </div>
            <div class="reproductor-info flex-grow-1">
                <strong id="cancionActual">Ninguna canción en reproducción</strong>
                <div class="d-flex align-items-center mt-1">
                    <span id="tiempoActual" style="min-width: 40px;">0:00</span>
                    <input type="range" id="barraProgreso" min="0" max="100" value="0" class="form-range mx-2" style="flex-grow: 1;" />
                    <span id="duracionTotal" style="min-width: 40px;">0:00</span>
                </div>
            </div>
            <div class="reproductor-controles ms-3">
                <button class="btn btn-outline-light btn-sm" onclick="anteriorCancion()">⏮</button>
                <button class="btn btn-light btn-sm" onclick="togglePlay()">▶️</button>
                <button class="btn btn-outline-light btn-sm" onclick="siguienteCancion()">⏭</button>
                <input type="range" id="volumenControl" min="0" max="1" step="0.01" value="0.5" style="width: 100px;" />
                <button class="btn btn-outline-warning btn-sm" onclick="añadirFavorito()">❤️</button>
            </div>
        </div>
        <audio id="audioPlayer" src="" preload="auto"></audio>
        <button class="btn-toggle-player" id="togglePlayerBtn" title="Maximizar/Minimizar reproductor">⬆</button>
    </div>


    <!-- Scripts -->
    <script>
        const toggle = document.getElementById('theme-toggle');
        const html = document.documentElement;
        const switchLabel = document.querySelector('.switch-label');

        function setTheme(theme) {
            html.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            toggle.checked = (theme === 'dark');
            switchLabel.textContent = theme === 'dark' ? 'Modo Oscuro' : 'Modo Claro';
        }

        function loadTheme() {
            const saved = localStorage.getItem('theme');
            setTheme(saved === 'light' ? 'light' : 'dark');
        }

        toggle.addEventListener('change', () => {
            setTheme(toggle.checked ? 'dark' : 'light');
        });

        loadTheme();

        const audioPlayer = document.getElementById('audioPlayer');
            const cancionActual = document.getElementById('cancionActual');
            const portadaActual = document.getElementById('portadaActual');
            const volumenControl = document.getElementById('volumenControl');
            const barraProgreso = document.getElementById('barraProgreso');
            const tiempoActual = document.getElementById('tiempoActual');
            const duracionTotal = document.getElementById('duracionTotal');
            const reproductor = document.getElementById('reproductor');
            const togglePlayerBtn = document.getElementById('togglePlayerBtn');

            let estaReproduciendo = false;
            let cancionEnReproduccion = {
                titulo: '',
                url: '',
                portada: '',
                tiempo: 0
            };

            // 🔄 Restaurar canción al recargar
            document.addEventListener('DOMContentLoaded', () => {
                const data = sessionStorage.getItem('ultimaCancion');
                if (data) {
                    const c = JSON.parse(data);
                    reproducirCancion(c.titulo, c.url, c.portada, c.tiempo, false);
                }
            });

            volumenControl.addEventListener('input', () => {
                audioPlayer.volume = volumenControl.value;
            });

            barraProgreso.addEventListener('input', () => {
                const nuevoTiempo = (barraProgreso.value / 100) * audioPlayer.duration;
                audioPlayer.currentTime = nuevoTiempo;
            });

            audioPlayer.addEventListener('timeupdate', () => {
                const progreso = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                barraProgreso.value = progreso || 0;
                tiempoActual.textContent = formatearTiempo(audioPlayer.currentTime);
                duracionTotal.textContent = formatearTiempo(audioPlayer.duration);

                // Guardar posición
                cancionEnReproduccion.tiempo = audioPlayer.currentTime;
                sessionStorage.setItem('ultimaCancion', JSON.stringify(cancionEnReproduccion));
            });

            function formatearTiempo(segundos) {
                if (isNaN(segundos)) return '0:00';
                const m = Math.floor(segundos / 60);
                const s = Math.floor(segundos % 60).toString().padStart(2, '0');
                return `${m}:${s}`;
            }

            function reproducirCancion(titulo, url, portada, tiempo = 0, autoPlay = true) {
                cancionEnReproduccion = { titulo, url, portada, tiempo };
                cancionActual.textContent = titulo;
                portadaActual.src = portada;
                audioPlayer.src = url;
                audioPlayer.currentTime = tiempo || 0;

                if (autoPlay) {
                    audioPlayer.play()
                        .then(() => estaReproduciendo = true)
                        .catch(err => console.error(err));
                }

                sessionStorage.setItem('ultimaCancion', JSON.stringify(cancionEnReproduccion));
            }

            function togglePlay() {
                if (!audioPlayer.src) return;
                if (audioPlayer.paused) {
                    audioPlayer.play().then(() => estaReproduciendo = true);
                } else {
                    audioPlayer.pause();
                    estaReproduciendo = false;
                }
            }

            function siguienteCancion() {
                alert("Siguiente canción no implementada.");
            }

            function anteriorCancion() {
                alert("Anterior canción no implementada.");
            }

            function añadirFavorito() {
                alert(`Añadido a favoritos: ${cancionEnReproduccion.titulo}`);
            }

            togglePlayerBtn.addEventListener('click', () => {
                reproductor.classList.toggle('expanded');
                togglePlayerBtn.textContent = reproductor.classList.contains('expanded') ? '⬇' : '⬆';

                if (reproductor.classList.contains('expanded')) {
                    portadaActual.style.height = '200px';
                    portadaActual.style.width = '200px';
                } else {
                    portadaActual.style.height = '60px';
                    portadaActual.style.width = '60px';
                }
            });

            // 📢 Función global para llamar desde botones
            window.reproducirCancion = reproducirCancion;
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
